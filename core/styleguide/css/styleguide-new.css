/*

These are all Sass maps that set the global variables used throughout the site

Rules:
1) No styles for elements can be declared here
2) Any variables not in maps must be prefixed with 'g-', and not be used on ANY other stylesheet. Please keep their names as short as possible
3) No map can reference a value in another map, only 'g-' vars if needed
4) Always use these variables on their own. Never use them in operations to output different values, like dividing one in half. Always add this value to the map instead.

*/
/* Clearfix */
.cf::after, .l-two-col::after, [role=main]::after {
  clear: both;
  content: "";
  display: table;
}

/* Completely remove from the flow and screen readers. */
.is-hidden {
  display: none !important;
  visibility: hidden !important;
}

/* Floats */
.right {
  float: right;
}

.left {
  float: left;
}

.clear::after {
  clear: both;
  content: "";
  display: table;
}

/* Text-Align */
.align-right {
  text-align: right;
}

.align-center {
  text-align: center;
}

.align-left {
  text-align: left;
}

/* Colors */
.valid {
  color: #319c73;
}

.error {
  color: #d54152;
}

.is-vishidden {
  position: absolute !important;
  overflow: hidden;
  width: 1px;
  height: 1px;
  padding: 0;
  border: 0;
  clip: rect(1px, 1px, 1px, 1px);
}

/* Header */
.sg-header {
  -webkit-transition: 0.5s;
  transition: 0.5s;
  position: fixed;
  top: 0;
  left: 0;
  height: 100%;
  width: 175px;
  overflow: scroll;
  z-index: 2;
  background: #eed7b7;
}

.sg-header a,
.sg-header li,
.sg-header span {
  font-family: "Lucida Grande", "Tahoma", "Verdana", "Arial", sans-serif;
}

@media (max-width: 49.1875em) {
  #patternlab-html:not(.show-menu) .sg-header {
    -webkit-transition: 0.5s;
    transition: 0.5s;
    -webkit-transform: translateX(-175px);
    transform: translateX(-175px);
  }
}

.sg-header ul,
.sg-header ol {
  margin-top: 0;
  margin-right: 0;
  margin-bottom: 0;
  padding: 0;
}

.sg-nav-container a {
  display: block;
  text-decoration: none;
  color: #4685bd;
  font-weight: 700;
}

.sg-nav-container a::after {
  clear: both;
  content: "";
  display: table;
}

.sg-nav li {
  position: relative;
  cursor: pointer;
  padding: 0;
  list-style: none;
}

.sg-item-arrow {
  -webkit-transition: 0.5s;
  transition: 0.5s;
  position: absolute;
  top: 0.33333em;
  right: 0.33333em;
  font-size: 1.728rem !important;
}

[aria-expanded=true] > .sg-item-arrow {
  -webkit-transition: 0.5s;
  transition: 0.5s;
  -webkit-transform: rotate(180deg);
  transform: rotate(180deg);
}

.sg-main-item {
  padding: 1em 0.5em;
  width: 100%;
  border-bottom: 1px solid #d59c4a;
}

.sg-main-item-text {
  padding-top: 1em;
  padding-bottom: 1em;
  padding-left: 0.5em;
  display: block;
}

.sg-nav__sections {
  background: #e6c492;
}

.sg-nav__sections li {
  padding: 0;
  border-bottom: 1px solid #d59c4a;
}

.sg-nav__section-text {
  padding-top: 1em;
  padding-bottom: 1em;
  padding-left: 1em;
  display: block;
}

.sg-nav__sub-items {
  background: #dbab65;
}

.sg-nav__sub-items li {
  padding: 0 0 0 0.5em;
}

[aria-hidden='true'],
[data-a11y-toggle]:not([aria-controls]) {
  display: none;
}

#patternlab-html, #patternlab-body {
  margin: 0;
  padding: 0;
  background: #fffefc;
  -webkit-text-size-adjust: 100%;
}

#patternlab-html::after, #patternlab-body::after {
  clear: both;
  content: "";
  display: table;
}

/* Viewport */
#sg-vp-wrap {
  -webkit-transition: 0.5s;
  transition: 0.5s;
  position: fixed;
  top: 0;
  right: 0;
  height: 100%;
  width: calc(100% - 175px);
  box-sizing: border-box;
  z-index: 0;
}

@media (max-width: 49.1875em) {
  #patternlab-html:not(.show-menu) #sg-vp-wrap {
    -webkit-transition: 0.5s;
    transition: 0.5s;
    width: 100%;
  }
}

#sg-viewport {
  position: absolute;
  top: 0;
  left: 0;
  height: 100%;
  width: 100% !important;
  box-sizing: border-box;
  margin: 0;
  padding: 1em;
  background-color: #fffefc;
}

@media (max-width: 49.1875em) {
  #sg-viewport {
    padding-top: 3em;
  }
}

#sg-gen-container {
  height: 100%;
  margin: 0 auto;
  position: relative;
  -webkit-overflow-scrolling: touch;
  overflow-y: auto;
  overflow-x: hidden;
}

.sg-menu-button {
  position: absolute;
  top: 0.5em;
  left: 0.5em;
  height: 44px;
  width: 44px;
  border-radius: 100%;
  box-sizing: border-box;
  padding: 11px;
  display: block;
  z-index: 1;
  font-size: 1.2rem;
  text-align: center;
  cursor: pointer;
  background-color: rgba(219, 171, 101, 0.5);
}

@media (min-width: 49.1875em) {
  .sg-menu-button {
    display: none;
  }
}

.sg-view-container {
  -webkit-transition: 0.5s;
  transition: 0.5s;
  position: fixed;
  top: auto;
  right: 0;
  bottom: 0;
  height: 45%;
  width: calc(100% - 175px);
  overflow-y: auto;
  overflow-x: hidden;
  box-sizing: border-box;
  z-index: 2;
  padding: 1em;
  font-family: "Lucida Grande", "Tahoma", "Verdana", "Arial", sans-serif;
  line-height: 1.44rem;
  background: rgba(39, 39, 49, 0.9);
  color: #fffefc;
}

@media (max-width: 49.1875em) {
  #patternlab-html:not(.show-menu) .sg-view-container {
    -webkit-transition: 0.5s;
    transition: 0.5s;
    width: 100%;
  }
}

.sg-view-container a {
  color: #6cabe3;
}

.sg-view-container pre {
  padding: 0 1em;
}

.sg-view-container.anim-ready {
  -webkit-transition: bottom 0.3s ease-out;
  transition: bottom 0.3s ease-out;
}

.sg-view-close {
  width: 100%;
  margin-bottom: -10px;
}

.sg-view-close-btn {
  display: block;
  text-transform: uppercase;
  text-decoration: none;
  text-align: right;
}

.sg-comment-container {
  padding-bottom: 2em;
  margin-bottom: 1em;
  border-bottom: 1px solid rgba(255, 255, 255, 0.25);
}

#sg-code-markup {
  padding-top: 10px;
}

#sg-code-tabs {
  list-style: none;
  margin: 0;
  padding: 0;
}

#sg-code-tabs::after {
  clear: both;
  content: "";
  display: table;
}

#sg-code-tabs li {
  float: left;
  padding: 0.5em 1em;
  cursor: pointer;
  font-size: 1.44rem;
  font-weight: 700;
  background-color: #3b3b4a;
}

.sg-code-title-active {
  background-color: #6cabe3 !important;
}

/* 
#sg-code-loader {
  display: none;
  position: absolute;
  left: 45%;
  top: 20%;
  width: 150px;
  padding: 10px;
  text-align: center;
  border-radius: 10px;
  background-color: #000;
  z-index: 100;
}
 */

/*# sourceMappingURL=data:application/json;base64, */
