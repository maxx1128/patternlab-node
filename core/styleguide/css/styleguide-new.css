@charset "UTF-8";
/*

These are all Sass maps that set the global variables used throughout the site

Rules:
1) No styles for elements can be declared here
2) Any variables not in maps must be prefixed with 'g-', and not be used on ANY other stylesheet. Please keep their names as short as possible
3) No map can reference a value in another map, only 'g-' vars if needed
4) Always use these variables on their own. Never use them in operations to output different values, like dividing one in half. Always add this value to the map instead.

*/
/* Completely remove from the flow and screen readers. */
.h-is-hidden {
  display: none !important;
  visibility: hidden !important;
}

/* Floats */
.h-right {
  float: right;
}

.h-left {
  float: left;
}

.h-clear::after {
  clear: both;
  content: "";
  display: table;
}

/* Text-Align */
.h-align-right {
  text-align: right;
}

.h-align-center {
  text-align: center;
}

.h-align-left {
  text-align: left;
}

/* Emphasis Colors */
.h-valid {
  color: #319c73;
}

.h-error {
  color: #d54152;
}

.h-warn {
  color: #ffde52;
}

.h-info {
  color: #5ac5e6;
}

.h-is-vishidden {
  position: absolute !important;
  overflow: hidden;
  width: 1px;
  height: 1px;
  padding: 0;
  border: 0;
  clip: rect(1px, 1px, 1px, 1px);
}

/*! normalize.css v4.0.0 | MIT License | github.com/necolas/normalize.css */
/**
 * 1. Change the default font family in all browsers (opinionated).
 * 2. Prevent adjustments of font size after orientation changes in IE and iOS.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */
}

/**
 * Remove the margin in all browsers (opinionated).
 */
body {
  margin: 0;
}

/* HTML5 display definitions
   ========================================================================== */
/**
 * Add the correct display in IE 9-.
 * 1. Add the correct display in Edge, IE, and Firefox.
 * 2. Add the correct display in IE.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
main,
menu,
nav,
section,
summary {
  /* 1 */
  display: block;
}

/**
 * Add the correct display in IE 9-.
 */
audio,
canvas,
progress,
video {
  display: inline-block;
}

/**
 * Add the correct display in iOS 4-7.
 */
audio:not([controls]) {
  display: none;
  height: 0;
}

/**
 * Add the correct vertical alignment in Chrome, Firefox, and Opera.
 */
progress {
  vertical-align: baseline;
}

/**
 * Add the correct display in IE 10-.
 * 1. Add the correct display in IE.
 */
template,
[hidden] {
  display: none;
}

/* Links
   ========================================================================== */
/**
 * Remove the gray background on active links in IE 10.
 */
a {
  background-color: transparent;
}

/**
 * Remove the outline on focused links when they are also active or hovered
 * in all browsers (opinionated).
 */
a:active,
a:hover {
  outline-width: 0;
}

/* Text-level semantics
   ========================================================================== */
/**
 * 1. Remove the bottom border in Firefox 39-.
 * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
 */
abbr[title] {
  border-bottom: none;
  /* 1 */
  text-decoration: underline;
  /* 2 */
  text-decoration: underline dotted;
  /* 2 */
}

/**
 * Prevent the duplicate application of `bolder` by the next rule in Safari 6.
 */
b,
strong {
  font-weight: inherit;
}

/**
 * Add the correct font weight in Chrome, Edge, and Safari.
 */
b,
strong {
  font-weight: bolder;
}

/**
 * Add the correct font style in Android 4.3-.
 */
dfn {
  font-style: italic;
}

/**
 * Correct the font size and margin on `h1` elements within `section` and
 * `article` contexts in Chrome, Firefox, and Safari.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

/**
 * Add the correct background and color in IE 9-.
 */
mark {
  background-color: #ff0;
  color: #000;
}

/**
 * Add the correct font size in all browsers.
 */
small {
  font-size: 80%;
}

/**
 * Prevent `sub` and `sup` elements from affecting the line height in
 * all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sub {
  bottom: -0.25em;
}

sup {
  top: -0.5em;
}

/* Embedded content
   ========================================================================== */
/**
 * Remove the border on images inside links in IE 10-.
 */
img {
  border-style: none;
}

/**
 * Hide the overflow in IE.
 */
svg:not(:root) {
  overflow: hidden;
}

/* Grouping content
   ========================================================================== */
/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */
}

/**
 * Add the correct margin in IE 8.
 */
figure {
  margin: 1em 40px;
}

/**
 * 1. Add the correct box sizing in Firefox.
 * 2. Show the overflow in Edge and IE.
 */
hr {
  box-sizing: content-box;
  /* 1 */
  height: 0;
  /* 1 */
  overflow: visible;
  /* 2 */
}

/* Forms
   ========================================================================== */
/**
 * Change font properties to `inherit` in all browsers (opinionated).
 */
button,
input,
select,
textarea {
  font: inherit;
}

/**
 * Restore the font weight unset by the previous rule.
 */
optgroup {
  font-weight: bold;
}

/**
 * Show the overflow in IE.
 * 1. Show the overflow in Edge.
 * 2. Show the overflow in Edge, Firefox, and IE.
 */
button,
input,
select {
  /* 2 */
  overflow: visible;
}

/**
 * Remove the margin in Safari.
 * 1. Remove the margin in Firefox and Safari.
 */
button,
input,
select,
textarea {
  /* 1 */
  margin: 0;
}

/**
 * Remove the inheritence of text transform in Edge, Firefox, and IE.
 * 1. Remove the inheritence of text transform in Firefox.
 */
button,
select {
  /* 1 */
  text-transform: none;
}

/**
 * Change the cursor in all browsers (opinionated).
 */
button,
[type="button"],
[type="reset"],
[type="submit"] {
  cursor: pointer;
}

/**
 * Restore the default cursor to disabled elements unset by the previous rule.
 */
[disabled] {
  cursor: default;
}

/**
 * 1. Prevent a WebKit bug where (2) destroys native `audio` and `video`
 *    controls in Android 4.
 * 2. Correct the inability to style clickable types in iOS.
 */
button,
html [type="button"],
[type="reset"],
[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
}

/**
 * Remove the inner border and padding in Firefox.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0;
}

/**
 * Restore the focus styles unset by the previous rule.
 */
button:-moz-focusring,
input:-moz-focusring {
  outline: 1px dotted ButtonText;
}

/**
 * Change the border, margin, and padding in all browsers (opinionated).
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em;
}

/**
 * 1. Correct the text wrapping in Edge and IE.
 * 2. Correct the color inheritance from `fieldset` elements in IE.
 * 3. Remove the padding so developers are not caught out when they zero out
 *    `fieldset` elements in all browsers.
 */
legend {
  box-sizing: border-box;
  /* 1 */
  color: inherit;
  /* 2 */
  display: table;
  /* 1 */
  max-width: 100%;
  /* 1 */
  padding: 0;
  /* 3 */
  white-space: normal;
  /* 1 */
}

/**
 * Remove the default vertical scrollbar in IE.
 */
textarea {
  overflow: auto;
}

/**
 * 1. Add the correct box sizing in IE 10-.
 * 2. Remove the padding in IE 10-.
 */
[type="checkbox"],
[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */
}

/**
 * Correct the cursor style of increment and decrement buttons in Chrome.
 */
[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
  height: auto;
}

/**
 * Correct the odd appearance of search inputs in Chrome and Safari.
 */
[type="search"] {
  -webkit-appearance: textfield;
}

/**
 * Remove the inner padding and cancel buttons in Chrome on OS X and
 * Safari on OS X.
 */
[type="search"]::-webkit-search-cancel-button,
[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

h1 {
  font-size: 2.8rem;
  line-height: 2.8rem;
  margin: 1em 0;
}

h2 {
  font-size: 2.33rem;
  line-height: 2.33rem;
  margin: 1em 0;
}

h3 {
  font-size: 1.94rem;
  line-height: 1.94rem;
  margin: 1em 0;
}

h4 {
  font-size: 1.62rem;
  line-height: 1.62rem;
  margin: 0.5em 0;
}

h5 {
  font-size: 1.35rem;
  line-height: 1.35rem;
  margin: 0.5em 0;
}

h6 {
  font-size: 1.13rem;
  line-height: 1.35rem;
  margin: 0.5em 0;
}

p {
  font-size: 0.94rem;
  line-height: 1.62rem;
  margin: 0 0 1em 0;
}

small {
  font-size: 0.78rem;
  line-height: 1.13rem;
  margin: 0.33em 0;
}

tiny {
  font-size: 0.65rem;
  line-height: 1.13rem;
  margin: 0.33em 0;
}

body {
  font-family: "Lucida Grande", "Tahoma", "Verdana", "Arial", sans-serif;
  color: #1d1d25;
}

a {
  color: #c52052;
  text-decoration: none;
  outline: 0;
}

a:hover, a:focus, a:active {
  color: #a71b46;
  text-decoration: underline;
}

h1,
h2,
h3,
h4,
h5,
h6 {
  font-family: "Verdana", "Geneva", sans-serif;
}

.subheading {
  font-family: "Lucida Grande", "Tahoma", "Verdana", "Arial", sans-serif;
  font-weight: 700;
}

hr {
  border: 0;
  height: 2px;
  margin: 2em 0;
  background: #e6c492;
}

abbr {
  border-bottom: 1px solid #d59c4a;
  cursor: help;
}

.intro {
  font-weight: 700;
}

/*
// If custom Synapse utilities are needed, use this mixin

@mixin synapse-custom($var) {
  @if ($var == 'margin-auto') {
    margin: 0 auto;
  }
}

*/
.l-col__single {
  max-width: 75em;
  margin: 0 auto;
  box-sizing: border-box;
  padding: 1em 2em;
}

.l-col__single::after {
  clear: both;
  content: "";
  display: table;
}

.__col-example {
  height: 200px;
  padding-top: 40px !important;
  box-sizing: border-box;
  color: #1b3b45;
  text-align: center;
  background-color: #9cdcf0;
}

.__col-example:nth-of-type(even) {
  background-color: #ceeef8;
}

.sg-nav-intro {
  padding: 0.5em 1em;
  border-bottom: 1px solid #d59c4a;
}

.sg-nav-title {
  margin: 0.33em 0 0.5em 0;
}

/* Header */
.sg-header {
  -webkit-transition: 0.5s;
  transition: 0.5s;
  position: fixed;
  top: 0;
  left: 0;
  height: 100%;
  width: 14.0625em;
  overflow-y: scroll;
  overflow-x: scroll;
  z-index: 2;
  background: #fffefc;
  border-right: 1px solid #d59c4a;
}

.sg-header a,
.sg-header li,
.sg-header span {
  font-family: "Lucida Grande", "Tahoma", "Verdana", "Arial", sans-serif;
}

@media (max-width: 49.1875em) {
  #patternlab-html:not(.show-menu) .sg-header {
    -webkit-transition: 0.5s;
    transition: 0.5s;
    -webkit-transform: translateX(-14.0625em);
    transform: translateX(-14.0625em);
  }
}

.sg-header ul,
.sg-header ol {
  margin-top: 0;
  margin-right: 0;
  margin-bottom: 0;
  padding: 0;
}

.sg-nav-container {
  max-width: 14.0625em;
  overflow-x: hidden;
  box-sizing: border-box;
}

.sg-nav-container a {
  display: block;
  text-decoration: none;
  color: #a71b46;
  font-weight: 700;
}

.sg-nav-container a::after {
  clear: both;
  content: "";
  display: table;
}

.sg-nav li {
  max-width: 14.0625em;
  box-sizing: border-box;
  position: relative;
  cursor: pointer;
  padding: 0;
  list-style: none;
}

.sg-item-arrow {
  -webkit-transition: 0.5s;
  transition: 0.5s;
  position: absolute;
  top: 0.5em;
  right: 0.5em;
  font-size: 1.62rem !important;
}

[aria-expanded=true] > .sg-item-arrow,
[aria-expanded=true] + .sg-item-arrow {
  -webkit-transition: 0.5s;
  transition: 0.5s;
  -webkit-transform: rotate(180deg);
  transform: rotate(180deg);
}

.sg-main-item {
  padding: 1em 0.5em;
  max-width: 14.0625em;
  box-sizing: border-box;
  width: 100%;
  border-bottom: 1px solid #d59c4a;
}

.sg-main-item-text {
  padding-top: 1em;
  padding-bottom: 1em;
  padding-left: 0.5em;
  display: block;
}

.sg-nav__sections {
  background: #f2e1c9;
}

.sg-nav__sections li {
  padding: 0;
  border-bottom: 1px solid #d59c4a;
}

.sg-nav__section-text {
  padding-top: 1em;
  padding-bottom: 1em;
  padding-left: 1em;
  display: block;
}

.sg-nav__sub-items {
  background: #e6c492;
}

.sg-nav__sub-items li {
  padding: 0 0 0 0.5em;
}

[aria-hidden='true'],
[data-a11y-toggle]:not([aria-controls]) {
  display: none;
}

.sg-menu-toggle.active {
  position: relative;
}

.sg-menu-toggle.active .sg-main-item {
  padding-left: 1em;
}

.sg-menu-toggle.active:after {
  position: absolute;
  top: 1em;
  right: 1em;
  content: '★';
}

.tt-input {
  max-width: 14.0625em;
}

.tt-dropdown-menu {
  max-width: 14.0625em;
}

#patternlab-html, #patternlab-body {
  margin: 0;
  padding: 0;
  background: #fffefc;
  -webkit-text-size-adjust: 100%;
}

#patternlab-html::after, #patternlab-body::after {
  clear: both;
  content: "";
  display: table;
}

/* Viewport */
#sg-vp-wrap {
  -webkit-transition: 0.5s;
  transition: 0.5s;
  position: fixed;
  top: 0;
  right: 0;
  height: 100%;
  width: calc(100% - 14.0625em);
  box-sizing: border-box;
  z-index: 0;
}

@media (max-width: 49.1875em) {
  #patternlab-html:not(.show-menu) #sg-vp-wrap {
    -webkit-transition: 0.5s;
    transition: 0.5s;
    width: 100%;
  }
}

#sg-viewport {
  -webkit-transition: 0.5s;
  transition: 0.5s;
  height: 100%;
  width: 100%;
  display: block;
  box-sizing: border-box;
  margin: 0 auto;
  border: 1px solid #805e2c;
  border-top-width: 0;
  border-bottom-width: 0;
  background-color: #fffefc;
}

#sg-gen-container {
  height: 100%;
  margin: 0 auto;
  position: relative;
  -webkit-overflow-scrolling: touch;
  overflow-y: auto;
  overflow-x: hidden;
}

.sg-menu-button {
  position: absolute;
  top: 0.5em;
  left: 0.5em;
  height: 44px;
  width: 44px;
  border-radius: 100%;
  box-sizing: border-box;
  padding: 11px;
  display: block;
  z-index: 1;
  font-size: 1.13rem;
  text-align: center;
  cursor: pointer;
  background-color: rgba(219, 171, 101, 0.5);
}

@media (min-width: 49.1875em) {
  .sg-menu-button {
    display: none;
  }
}

#sg-controls {
  border-top: 3px solid #d59c4a;
}

.sg-view-container {
  -webkit-transition: 0.5s;
  transition: 0.5s;
  position: fixed;
  top: auto;
  right: 0;
  bottom: 0;
  height: 45%;
  width: calc(100% - 14.0625em);
  overflow-y: auto;
  overflow-x: hidden;
  box-sizing: border-box;
  z-index: 2;
  padding: 1em;
  font-family: "Lucida Grande", "Tahoma", "Verdana", "Arial", sans-serif;
  background: rgba(29, 29, 37, 0.9);
  color: #fffefc;
}

@media (max-width: 49.1875em) {
  #patternlab-html:not(.show-menu) .sg-view-container {
    -webkit-transition: 0.5s;
    transition: 0.5s;
    width: 100%;
  }
}

.sg-view-container a {
  color: #ce416c;
}

.sg-view-container pre {
  padding: 0 1em;
}

.sg-view-container.anim-ready {
  -webkit-transition: bottom 0.3s ease-out;
  transition: bottom 0.3s ease-out;
}

.sg-view-close {
  width: 100%;
  margin-bottom: -10px;
}

.sg-view-close-btn {
  display: block;
  text-transform: uppercase;
  text-decoration: none;
  text-align: right;
}

.sg-comment-container {
  padding-bottom: 2em;
  margin-bottom: 1em;
  border-bottom: 1px solid rgba(255, 255, 255, 0.25);
}

#sg-code-markup {
  padding-top: 10px;
}

#sg-code-tabs {
  list-style: none;
  margin: 0;
  padding: 0;
}

#sg-code-tabs::after {
  clear: both;
  content: "";
  display: table;
}

#sg-code-tabs li {
  float: left;
  padding: 0.5em 1em;
  cursor: pointer;
  font-size: 1.35rem;
  font-weight: 700;
  background-color: #3b3b4a;
}

.sg-code-title-active {
  background-color: #ce416c !important;
}

#sg-viewport[data-screen="*"] {
  -webkit-transition: 0.5s;
  transition: 0.5s;
}

#sg-viewport[data-screen="small"] {
  -webkit-transition: 0.5s;
  transition: 0.5s;
  max-width: 30em;
}

#sg-viewport[data-screen="medium"] {
  -webkit-transition: 0.5s;
  transition: 0.5s;
  max-width: 49.1875em;
}

#sg-viewport[data-screen="large"] {
  -webkit-transition: 0.5s;
  transition: 0.5s;
  max-width: 56.25em;
}

#sg-viewport[data-screen="max-width"] {
  -webkit-transition: 0.5s;
  transition: 0.5s;
  max-width: 75em;
}

#sg-viewport[data-screen="smallest"] {
  max-width: 20em;
}

#sg-viewport[data-screen="full"] {
  max-width: none;
}

/*# sourceMappingURL=data:application/json;base64, */
