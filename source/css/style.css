/* 

Go through each pattern one by one and
- Convert to BEM
- Replace if needed with Refills component
- Integrate Synapse and Global Vars

Elements to replace:
- Header
- Footer

 */
/*

These are all Sass maps that set the global variables used throughout the site

Rules:
1) No styles for elements can be declared here
2) Any variables not in maps must be prefixed with 'g-', and not be used on ANY other stylesheet. Please keep their names as short as possible
3) No map can reference a value in another map, only 'g-' vars if needed
4) Always use these variables on their own. Never use them in operations to output different values, like dividing one in half. Always add this value to the map instead.

*/
/* Clearfix */
.cf::after, .l-two-col::after, [role=main]::after {
  clear: both;
  content: "";
  display: table;
}

/* Completely remove from the flow and screen readers. */
.is-hidden {
  display: none !important;
  visibility: hidden !important;
}

/* Floats */
.right {
  float: right;
}

.left {
  float: left;
}

/* Text-Align */
.align-right {
  text-align: right;
}

.align-center {
  text-align: center;
}

.align-left {
  text-align: left;
}

/* Colors */
.valid {
  color: green;
}

.error {
  color: red;
}

/*------------------------------------*    $RESET
\*------------------------------------*/
/* Border-Box http:/paulirish.com/2012/box-sizing-border-box-ftw/ */
* {
  box-sizing: border-box;
}

html, body, div, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, ol, ul, li, form, legend, label, table, header, footer, nav, section, figure {
  margin: 0;
  padding: 0;
}

header, footer, nav, section, article, hgroup, figure {
  display: block;
}

/*! normalize.css v4.0.0 | MIT License | github.com/necolas/normalize.css */
/**
 * 1. Change the default font family in all browsers (opinionated).
 * 2. Prevent adjustments of font size after orientation changes in IE and iOS.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */
}

/**
 * Remove the margin in all browsers (opinionated).
 */
body {
  margin: 0;
}

/* HTML5 display definitions
   ========================================================================== */
/**
 * Add the correct display in IE 9-.
 * 1. Add the correct display in Edge, IE, and Firefox.
 * 2. Add the correct display in IE.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
main,
menu,
nav,
section,
summary {
  /* 1 */
  display: block;
}

/**
 * Add the correct display in IE 9-.
 */
audio,
canvas,
progress,
video {
  display: inline-block;
}

/**
 * Add the correct display in iOS 4-7.
 */
audio:not([controls]) {
  display: none;
  height: 0;
}

/**
 * Add the correct vertical alignment in Chrome, Firefox, and Opera.
 */
progress {
  vertical-align: baseline;
}

/**
 * Add the correct display in IE 10-.
 * 1. Add the correct display in IE.
 */
template,
[hidden] {
  display: none;
}

/* Links
   ========================================================================== */
/**
 * Remove the gray background on active links in IE 10.
 */
a {
  background-color: transparent;
}

/**
 * Remove the outline on focused links when they are also active or hovered
 * in all browsers (opinionated).
 */
a:active,
a:hover {
  outline-width: 0;
}

/* Text-level semantics
   ========================================================================== */
/**
 * 1. Remove the bottom border in Firefox 39-.
 * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
 */
abbr[title] {
  border-bottom: none;
  /* 1 */
  text-decoration: underline;
  /* 2 */
  text-decoration: underline dotted;
  /* 2 */
}

/**
 * Prevent the duplicate application of `bolder` by the next rule in Safari 6.
 */
b,
strong {
  font-weight: inherit;
}

/**
 * Add the correct font weight in Chrome, Edge, and Safari.
 */
b,
strong {
  font-weight: bolder;
}

/**
 * Add the correct font style in Android 4.3-.
 */
dfn {
  font-style: italic;
}

/**
 * Correct the font size and margin on `h1` elements within `section` and
 * `article` contexts in Chrome, Firefox, and Safari.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

/**
 * Add the correct background and color in IE 9-.
 */
mark {
  background-color: #ff0;
  color: #000;
}

/**
 * Add the correct font size in all browsers.
 */
small {
  font-size: 80%;
}

/**
 * Prevent `sub` and `sup` elements from affecting the line height in
 * all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sub {
  bottom: -0.25em;
}

sup {
  top: -0.5em;
}

/* Embedded content
   ========================================================================== */
/**
 * Remove the border on images inside links in IE 10-.
 */
img {
  border-style: none;
}

/**
 * Hide the overflow in IE.
 */
svg:not(:root) {
  overflow: hidden;
}

/* Grouping content
   ========================================================================== */
/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */
}

/**
 * Add the correct margin in IE 8.
 */
figure {
  margin: 1em 40px;
}

/**
 * 1. Add the correct box sizing in Firefox.
 * 2. Show the overflow in Edge and IE.
 */
hr {
  box-sizing: content-box;
  /* 1 */
  height: 0;
  /* 1 */
  overflow: visible;
  /* 2 */
}

/* Forms
   ========================================================================== */
/**
 * Change font properties to `inherit` in all browsers (opinionated).
 */
button,
input,
select,
textarea {
  font: inherit;
}

/**
 * Restore the font weight unset by the previous rule.
 */
optgroup {
  font-weight: bold;
}

/**
 * Show the overflow in IE.
 * 1. Show the overflow in Edge.
 * 2. Show the overflow in Edge, Firefox, and IE.
 */
button,
input,
select {
  /* 2 */
  overflow: visible;
}

/**
 * Remove the margin in Safari.
 * 1. Remove the margin in Firefox and Safari.
 */
button,
input,
select,
textarea {
  /* 1 */
  margin: 0;
}

/**
 * Remove the inheritence of text transform in Edge, Firefox, and IE.
 * 1. Remove the inheritence of text transform in Firefox.
 */
button,
select {
  /* 1 */
  text-transform: none;
}

/**
 * Change the cursor in all browsers (opinionated).
 */
button,
[type="button"],
[type="reset"],
[type="submit"] {
  cursor: pointer;
}

/**
 * Restore the default cursor to disabled elements unset by the previous rule.
 */
[disabled] {
  cursor: default;
}

/**
 * 1. Prevent a WebKit bug where (2) destroys native `audio` and `video`
 *    controls in Android 4.
 * 2. Correct the inability to style clickable types in iOS.
 */
button,
html [type="button"],
[type="reset"],
[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
}

/**
 * Remove the inner border and padding in Firefox.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0;
}

/**
 * Restore the focus styles unset by the previous rule.
 */
button:-moz-focusring,
input:-moz-focusring {
  outline: 1px dotted ButtonText;
}

/**
 * Change the border, margin, and padding in all browsers (opinionated).
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em;
}

/**
 * 1. Correct the text wrapping in Edge and IE.
 * 2. Correct the color inheritance from `fieldset` elements in IE.
 * 3. Remove the padding so developers are not caught out when they zero out
 *    `fieldset` elements in all browsers.
 */
legend {
  box-sizing: border-box;
  /* 1 */
  color: inherit;
  /* 2 */
  display: table;
  /* 1 */
  max-width: 100%;
  /* 1 */
  padding: 0;
  /* 3 */
  white-space: normal;
  /* 1 */
}

/**
 * Remove the default vertical scrollbar in IE.
 */
textarea {
  overflow: auto;
}

/**
 * 1. Add the correct box sizing in IE 10-.
 * 2. Remove the padding in IE 10-.
 */
[type="checkbox"],
[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */
}

/**
 * Correct the cursor style of increment and decrement buttons in Chrome.
 */
[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
  height: auto;
}

/**
 * Correct the odd appearance of search inputs in Chrome and Safari.
 */
[type="search"] {
  -webkit-appearance: textfield;
}

/**
 * Remove the inner padding and cancel buttons in Chrome on OS X and
 * Safari on OS X.
 */
[type="search"]::-webkit-search-cancel-button,
[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

body {
  font-family: "Lucida Grande", "Tahoma", "Verdana", "Arial", sans-serif;
  color: #000;
}

a {
  color: #477dca;
  text-decoration: none;
  outline: 0;
}

a:hover, a:focus {
  color: #3c6aac;
  text-decoration: underline;
}

h1,
h2,
h3,
h4,
h5,
h6 {
  font-family: "Verdana", "Geneva", sans-serif;
}

h1,
.alpha {
  font-size: 2.98598em;
  line-height: 1.728em;
  margin: 0 0 0.5em;
}

h2,
.beta {
  font-size: 2.48832em;
  line-height: 1.728em;
  margin: 0 0 0.33333em;
}

h3,
.gamma {
  font-size: 2.0736em;
  line-height: 1.728em;
  margin: 0 0 0.33333em;
}

h4 {
  font-size: 1.728em;
  line-height: 1.728em;
  margin: 0 0 0.25em;
}

h5 {
  font-size: 1.44em;
  line-height: 1.44em;
  margin: 0 0 0.25em;
}

h6 {
  font-size: 1.2em;
  line-height: 1.44em;
  margin: 0 0 0.25em;
}

.subheading {
  font-family: "Lucida Grande", "Tahoma", "Verdana", "Arial", sans-serif;
  font-weight: 700;
}

p {
  margin-bottom: 1em;
  font-size: 1em;
  line-height: 1.44em;
}

blockquote {
  padding: 1em;
  padding-left: 2em;
  margin: 0;
  color: #3d3d3d;
  font-style: italic;
  line-height: 1.44em;
  border-left: 3px solid #999;
}

hr {
  border: 0;
  height: 2px;
  margin: 2em 0;
  background: #d6d6d6;
}

abbr {
  border-bottom: 1px solid #999;
  cursor: help;
}

.intro {
  font-weight: 700;
}

.btn {
  -webkit-transition: 0.5s;
  transition: 0.5s;
  display: inline-block;
  padding: 1em;
  line-height: 1;
  color: #fff;
  text-align: center;
  border: 0;
  background: #477dca;
  border-radius: 8px;
}

.btn:hover, .btn:focus, .btn:active {
  -webkit-transition: 0.5s;
  transition: 0.5s;
  color: #fff;
  text-decoration: none;
  background-color: #3c6aac;
}

.--btn-alt {
  color: #477dca;
  background-color: #fff;
  border: 2px solid #477dca;
}

.--btn-alt:hover, .--btn-alt:focus, .--btn-alt:active {
  color: #fff;
  background-color: #477dca;
  border: 2px solid #477dca;
}

.--btn-small {
  padding: 1em;
  font-size: 0.69444em;
}

.--btn-large {
  padding: 1.5em 2em;
  font-size: 1.2em;
}

.--btn-disabled {
  cursor: default;
  color: #828282;
  background: #d6d6d6;
}

.--btn-disabled:hover, .--btn-disabled:focus, .--btn-disabled:active {
  color: #828282;
  background: #d6d6d6;
}

ol,
ul {
  margin-bottom: 1em;
  margin-left: 2em;
  padding: 0;
  line-height: 1.44em;
}

ol ol,
ol ul,
ul ol,
ul ul {
  margin-top: 0.33333em;
  margin-bottom: 0;
  margin-bottom: 0;
}

ol li,
ul li {
  margin-bottom: 0.33333em;
}

/* Definition Lists */
dl {
  overflow: hidden;
  margin: 0 0 1rem;
}

dt,
dd {
  margin-bottom: 0.5em;
}

dt {
  font-weight: bold;
}

dd {
  margin-left: 1em;
}

/*------------------------------------*    $MEDIA ELEMENTS
\*------------------------------------*/
/* Flexible Media */
img, video, object {
  max-width: 100%;
  height: auto;
}

iframe {
  margin-bottom: 1rem;
}

figure {
  margin-bottom: 1rem;
}

figure img {
  margin-bottom: 0.25rem;
}

figcaption {
  font-style: italic;
}

/*------------------------------------*    $Table
\*------------------------------------*/
table {
  border-collapse: collapse;
  -webkit-font-feature-settings: 'kern', 'liga', 'tnum';
          font-feature-settings: 'kern', 'liga', 'tnum';
  margin: 0.5em;
  table-layout: fixed;
  width: 100%;
}

th {
  border-bottom: 1px solid #999;
  font-weight: 700;
  padding: 1em 0;
  text-align: left;
}

td {
  border-bottom: 1px solid #999;
  padding: 1em 0;
}

tr,
td,
th {
  vertical-align: middle;
}

/*------------------------------------*    $MEDIA ELEMENTS
\*------------------------------------*/
/* Flexible Media */
img, video, object {
  max-width: 100%;
  height: auto;
}

iframe {
  margin-bottom: 1rem;
}

figure {
  margin-bottom: 1rem;
}

figure img {
  margin-bottom: 0.25rem;
}

figcaption {
  font-style: italic;
}

/*------------------------------------*    $FORMS
\*------------------------------------*/
form > div {
  margin-bottom: 1rem;
}

form ol, form ul {
  list-style: none;
  margin-left: 0;
}

fieldset {
  border: 0;
  padding: 0;
  margin: 0;
}

label {
  display: block;
  padding-bottom: 0.25rem;
}

button, input, select, textarea {
  font-family: inherit;
  font-size: 100%;
  margin: 0;
}

input, textarea {
  width: 100%;
  border: 1px solid gray;
  padding: 0.5rem 0.65rem;
}

input[type=text], input[type=search], input[type=url], input[type=number], textarea {
  -webkit-appearance: none;
}

button, input[type="submit"] {
  padding: 0.5rem;
  background: #333333;
  border: 1px solid gray;
  cursor: pointer;
}

input[type="checkbox"],
input[type="radio"] {
  width: auto;
  margin-right: 0.3em;
}

input[type="search"] {
  -webkit-appearance: none;
  border-radius: 0;
}

input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

.field-container {
  margin-bottom: 1rem;
}

.inline-form fieldset, .inline-form .inline-container {
  position: relative;
}

.inline-form input[type=submit], .inline-form button, .inline-form .btn {
  font-size: 0.875em;
  padding: 0.65rem 1.3rem;
  background: #333333;
  position: absolute;
  top: 0;
  right: 0;
  z-index: 1;
  width: auto;
}

.inline-form input[type=submit]:hover, .inline-form input[type=submit]:focus, .inline-form button:hover, .inline-form button:focus, .inline-form .btn:hover, .inline-form .btn:focus {
  background: gray;
  color: white;
}

.inline-search-results-form {
  width: 100%;
}

@media all and (min-width: 46.8em) {
  .inline-search-results-form {
    width: 82%;
  }
}

.inline-search-results-form fieldset, .inline-search-results-form .inline-container {
  position: relative;
}

.inline-search-results-form input[type=submit], .inline-search-results-form button {
  position: absolute;
  top: 0;
  right: 0;
  z-index: 1;
  width: auto;
}

/* Validation */
.has-error {
  border-color: red;
}

.is-valid {
  border-color: #089e00;
}

/*
// If custom Synapse utilities are needed, use this mixin

@mixin synapse-custom($var) {
  @if ($var == 'margin-auto') {
    margin: 0 auto;
  }
}

*/
.layout-single {
  max-width: 75em;
  margin: 0 auto;
  padding: 1em 0;
  padding: 1em;
}

.layout-single::after {
  clear: both;
  content: "";
  display: table;
}

/* Grid Container */
.g {
  overflow: hidden;
  margin: 0 -0.5rem;
}

/* Grid Item */
.gi {
  padding: 0.5rem;
}

.gi img {
  display: block;
}

@media all and (min-width: 46.8em) {
  .gi {
    float: left;
  }
}

/* Grid 1up */
.g-1up .gi {
  width: 100%;
}

/* Grid 2up */
@media all and (min-width: 46.8em) {
  .g-2up > .gi {
    float: left;
    width: 50%;
  }
  .g-2up > .gi:nth-of-type(odd) {
    clear: left;
  }
}

/* Grid Half (Always displayed side by side) */
.g-half > .gi {
  float: left;
  width: 50%;
}

.g-half > .gi:nth-of-type(odd) {
  clear: left;
}

/* Grid 3up */
@media all and (min-width: 46.8em) {
  .g-3up > .gi {
    float: left;
    width: 50%;
  }
  .g-3up > .gi:nth-of-type(2n+1) {
    clear: left;
  }
}

@media all and (min-width: 50em) {
  .g-3up > .gi {
    width: 31.3333333%;
  }
  .g-3up > .gi:nth-of-type(2n+1) {
    clear: none;
  }
  .g-3up > .gi:nth-of-type(3n+1) {
    clear: left;
  }
}

/* Grid 4up */
@media all and (min-width: 46.8em) {
  .g-4up > .gi {
    float: left;
    width: 50%;
  }
  .g-4up > .gi:nth-of-type(2n+1) {
    clear: both;
  }
}

@media all and (min-width: 50em) {
  .g-4up > .gi {
    width: 25%;
  }
  .g-4up > .gi:nth-of-type(2n+1) {
    clear: none;
  }
  .g-4up > .gi:nth-of-type(4n+1) {
    clear: left;
  }
}

/* Grid Quarter (Always displayed side by side) */
.g-quarter > .gi {
  float: left;
  width: 24%;
}

.g-quarter > .gi:nth-of-type(4n+1) {
  clear: left;
}

@media all and (min-width: 29.75em) {
  .g-max4 > .gi {
    float: left;
    width: 50%;
  }
  .g-max4 > .gi:nth-of-type(2n+1) {
    clear: both;
  }
}

@media all and (min-width: 39.8em) {
  .g-max4 > .gi {
    width: 33.3333333%;
  }
  .g-max4 > .gi:nth-of-type(2n+1) {
    clear: none;
  }
  .g-max4 > .gi:nth-of-type(3n+1) {
    clear: left;
  }
}

@media all and (min-width: 50em) {
  .g-max4 > .gi {
    width: 25%;
  }
  .g-max4 > .gi:nth-of-type(3n+1) {
    clear: none;
  }
  .g-max4 > .gi:nth-of-type(4n+1) {
    clear: left;
  }
}

/* Grid 5up */
.g-max5 > .gi {
  float: left;
  width: 50%;
}

.g-max5 > .gi:nth-of-type(2n+1) {
  clear: both;
}

@media all and (min-width: 39.8em) {
  .g-max5 > .gi {
    width: 33.3333333%;
  }
  .g-max5 > .gi:nth-of-type(2n+1) {
    clear: none;
  }
  .g-max5 > .gi:nth-of-type(3n+1) {
    clear: left;
  }
}

@media all and (min-width: 46.8em) {
  .g-max5 > .gi {
    width: 25%;
  }
  .g-max5 > .gi:nth-of-type(3n+1) {
    clear: none;
  }
  .g-max5 > .gi:nth-of-type(4n+1) {
    clear: left;
  }
}

@media all and (min-width: 48em) {
  .g-max5 > .gi {
    width: 20%;
  }
  .g-max5 > .gi:nth-of-type(4n+1) {
    clear: none;
  }
  .g-max5 > .gi:nth-of-type(5n+1) {
    clear: left;
  }
}

/* Grid 2/3 */
@media all and (min-width: 46.8em) {
  .gi-2-3 {
    float: left;
    width: 66.666666%;
  }
}

@media all and (min-width: 46.8em) {
  .gi-1-3 {
    float: left;
    width: 33.333333%;
  }
}

/* Grid 4up block */
.g-opposites .gi {
  float: left;
}

.g-opposites .gi:last-child {
  float: right;
  text-align: right;
}

body {
  background: #fff;
}

/* Layout Container */
[role=main] {
  max-width: 75em;
  margin: 0 auto;
  padding: 1em 0;
}

/*------------------------------------*    $FOOTER
\*------------------------------------*/
.footer {
  clear: both;
  overflow: hidden;
  background: #131313;
  color: white;
  line-height: 1.2;
}

.footer__container {
  max-width: 75em;
  margin: 0 auto;
  padding: 1em 0;
  padding: 1em 0.5em;
}

.footer__container::after {
  clear: both;
  content: "";
  display: table;
}

.footer a {
  color: #f9f9f9;
}

.nav-footer {
  margin: -1rem -1rem 1rem;
}

.nav-footer li {
  border-bottom: 1px solid #333333;
}

@media all and (min-width: 46.8em) {
  .nav-footer li {
    border: 0;
    float: left;
  }
}

.nav-footer a {
  display: block;
  padding: 1rem;
}

@media all and (min-width: 46.8em) {
  .copyright {
    float: right;
  }
}

/*------------------------------------*    $PAGE STRUCTURE
\*------------------------------------*/
header {
  padding: 0;
  background: #fff;
  border-bottom: 1px solid #999;
}

header::after {
  clear: both;
  content: "";
  display: table;
}

.header__container {
  max-width: 75em;
  margin: 0 auto;
  padding: 1em 0;
  padding: 1em 0.5em;
}

.header__container::after {
  clear: both;
  content: "";
  display: table;
}

.logo {
  float: left;
  max-width: 8rem;
  margin: 0.5em;
}

@media (min-width: 49.1875em) {
  .logo {
    max-width: 9rem;
  }
}

.nav-toggle {
  float: right;
  display: block;
  padding: 1em 1em 1em;
  border-left: 1px solid #dbdbdb;
}

@media (min-width: 49.1875em) {
  .nav-toggle {
    display: none;
  }
}

.search-form {
  overflow: hidden;
  max-height: 0;
}

@media all and (min-width: 46.8em) {
  .search-form {
    float: right;
    max-height: none;
    margin: 0.65em 0.5em 0 0;
  }
}

/*------------------------------------*    $NAVIGATION
\*------------------------------------*/
.nav {
  clear: both;
  overflow: hidden;
  max-height: 0;
}

.nav a {
  display: block;
  padding: 1rem;
  border-top: 1px solid #eeeeee;
}

.nav.active {
  max-height: 40em;
}

@media all and (min-width: 46.8em) {
  .nav {
    max-height: none;
    float: right;
    clear: none;
  }
  .nav ul {
    text-decoration: none;
  }
  .nav li {
    float: left;
  }
  .nav a {
    border: 0;
  }
}

.sidebar-layout {
  max-width: 75em;
  margin: 0 auto;
  padding: 1em 0;
}

.sidebar-layout::after {
  clear: both;
  content: "";
  display: table;
}

.sidebar-layout__main,
.sidebar-layout__sidebar {
  padding: 0 1em;
  box-sizing: border-box;
}

@media screen and (min-width: 49.1875em) {
  .sidebar-layout__main {
    width: 66.66667%;
    float: left;
  }
}

@media screen and (min-width: 49.1875em) {
  .sidebar-layout__sidebar {
    width: 33.33333%;
    float: right;
  }
}

.three-col-layout {
  max-width: 75em;
  margin: 0 auto;
  padding: 1em 0;
}

.three-col-layout::after {
  clear: both;
  content: "";
  display: table;
}

.three-col-layout__item {
  padding: 0 1em;
  box-sizing: border-box;
}

@media screen and (min-width: 49.1875em) {
  .three-col-layout__item {
    width: 33.33333%;
    display: inline-block;
    float: right;
  }
}

.accordion {
  margin-bottom: 1rem;
}

.acc-handle {
  background: #131313;
  color: white;
  font-family: Georgia, Times, "Times New Roman", serif;
  font-weight: bold;
  display: block;
  position: relative;
  padding: 0.5rem;
  border-bottom: 1px solid #dddddd;
}

.acc-handle:after {
  content: "+";
  float: right;
}

.acc-handle:hover {
  color: white;
  background: #333333;
}

.acc-handle.active {
  background: #333333;
}

.acc-handle.active:after {
  content: "-";
}

.alert {
  text-align: center;
  padding: 1rem;
  margin-bottom: .5rem;
  border: 1px solid #808080;
  background: #f9f9f9;
}

.alert-error {
  color: #F00;
  border-color: #F00;
  background: #ffbebe;
}

.section {
  margin: 0 0 1rem;
}

.section-title {
  margin-bottom: 0.5rem;
}

.article-header h1 {
  font-size: 2.5em;
}

.byline {
  font-size: 0.875em;
  font-style: italic;
  margin-bottom: 0.5rem;
}

/* 

1) Thumbnail Block - Small image, headline, paragraph
3) Inset block - Smaller image, text always overlayed on bottom

 */
.block {
  overflow: hidden;
}

.block p:last-child {
  margin-bottom: 0;
}

.block__headline {
  line-height: 1.44em;
}

.block__text {
  text-align: center;
}

@media (min-width: 30em) {
  .block__text {
    text-align: left;
  }
}

.block_excerpt {
  color: #000;
}

@media screen and (min-width: 30em) {
  .block--thumb .block__thumb {
    width: 41.66667%;
    float: left;
  }
}

@media screen and (min-width: 49.1875em) {
  .block--thumb .block__thumb {
    width: 33.33333%;
  }
}

@media screen and (min-width: 49.1875em) {
  .block--thumb .block__thumb {
    width: 25%;
  }
}

@media screen and (min-width: 30em) {
  .block--thumb .block__text {
    width: 58.33333%;
    box-sizing: border-box;
    padding-left: 1em;
    padding-right: 1em;
    float: right;
  }
}

@media screen and (min-width: 49.1875em) {
  .block--thumb .block__text {
    width: 66.66667%;
  }
}

@media screen and (min-width: 49.1875em) {
  .block--thumb .block__text {
    width: 75%;
    padding-top: 8px;
    padding-bottom: 8px;
  }
}

.block--inset {
  margin-bottom: 0.5em;
  position: relative;
}

.block--inset .block__text {
  position: absolute;
  bottom: 0;
  left: 0;
  width: 100%;
  padding: 1em;
  color: #fff;
  background: rgba(0, 0, 0, 0.5);
}

/* Generic Placeholder Brick: REMOVE FOR PRODUCTION */
.brick {
  background: #dcdddc;
  padding: 2rem;
  text-align: center;
  font-weight: bold;
  border-bottom: 1px solid #eeeeee;
}

/* Post List */
.post-list {
  margin: 0 0 1em;
  list-style-type: none;
}

/* Headline List */
.headline-list {
  margin: 0 0 1em;
  list-style-type: none;
}

.headline-list li {
  padding: 0.5em 0;
  border-top: 1px solid #999;
}

.headline-list.flush {
  margin: 0;
}

.pagination {
  overflow: hidden;
}

.pagination li {
  float: left;
  border-right: 1px solid #eeeeee;
}

.pagination li:last-child {
  border: 0;
}

.pagination a {
  padding: 1rem;
}

/* Search Form */
.search-field {
  padding-right: 3em;
}

.inline-form .search-submit {
  background: none;
  padding: 0.78em 1em;
  border: 0;
  border-left: 1px solid gray;
  color: gray;
}

.social-share {
  overflow: hidden;
  margin-bottom: 1rem;
}

.social-share li {
  float: left;
  margin-right: 0.25rem;
}

.social-share a {
  background: #333333;
  color: white;
  display: block;
  padding: 0.5rem;
}

.social-share a:hover {
  background: gray;
}

.tabs {
  overflow: hidden;
}

.tabs ul {
  display: table;
  width: 100%;
}

.tabs li {
  display: table-cell;
  text-align: center;
  border-right: 1px solid #dddddd;
}

.tabs li:last-child {
  border-right: 0;
}

.tabs a {
  display: block;
  padding: 0.5rem;
  background: gray;
}

.tabs a:hover, .tabs a:focus {
  background: #dddddd;
}

.tabs a.active {
  background: #333333;
  color: white;
}

/*# sourceMappingURL=data:application/json;base64, */
